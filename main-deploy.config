In deploy/main.tf:

data "aws_eks_cluster" "cluster" {
  name = module.aws-eks-accelerator-for-terraform.eks_cluster_id
}

data "aws_eks_cluster_auth" "cluster" {
  name = module.aws-eks-accelerator-for-terraform.eks_cluster_id
}

provider "aws" {
  //region = data.aws_region.current.id
  region = "us-east-1"
  //alias  = "default"
}

provider "kubernetes" {
  experiments {
    manifest_resource = true
  }
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
  token                  = data.aws_eks_cluster_auth.cluster.token
}

provider "helm" {
  kubernetes {
    host                   = data.aws_eks_cluster.cluster.endpoint
    token                  = data.aws_eks_cluster_auth.cluster.token
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
  }
}

module "kubernetes-addons" {
  source            = "../../modules/hd-k8s-addons"
  eks_cluster_id               = module.aws-eks-accelerator-for-terraform.eks_cluster_id
  
  #K8s Add-ons
  enable_cluster_autoscaler           = false

  depends_on = [module.aws-eks-accelerator-for-terraform.managed_node_groups]
}




In: kd-k8s-addons/cluster-autoscaler:

data.tf

data "aws_region" "current" {}

data "aws_iam_policy_document" "cluster_autoscaler" {
  statement {
    sid       = ""
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeTags",
      "autoscaling:SetDesiredCapacity",
      "autoscaling:TerminateInstanceInAutoScalingGroup",
      "ec2:DescribeLaunchTemplateVersions"
    ]
  }
}

locals.tf

locals {
  service_account_name = "cluster-autoscaler-sa"
  //namespace            = "kube-system"
  namespace            = "hd-cluster-autoscaler"

  default_helm_config = {
    name                       = "cluster-autoscaler"
    /* chart                      = "cluster-autoscaler"
    repository                 = "https://kubernetes.github.io/autoscaler"
    version                    = "9.10.8" */
    chart                      = "/Users/dhillonx/Documents/3_terraform-ansible/restructured-tf-accel-occ/modules/hd-k8s-addons/helm-charts/cluster-autoscaler/cluster-autoscaler"
    namespace                  = local.namespace
    timeout                    = "300"
    //create_namespace           = false
    create_namespace           = true
    values                     = local.default_helm_values
    lint                       = false
    verify                     = false
    keyring                    = ""
    /* repository_key_file        = ""
    repository_cert_file       = ""
    repository_ca_file         = ""
    repository_username        = ""
    repository_password        = "" */
    disable_webhooks           = false
    reuse_values               = false
    reset_values               = false
    force_update               = false
    recreate_pods              = false
    cleanup_on_fail            = false
    max_history                = 0
    atomic                     = false
    skip_crds                  = false
    render_subchart_notes      = true
    disable_openapi_validation = false
    wait                       = true
    wait_for_jobs              = false
    dependency_update          = false
    replace                    = false
    description                = "Cluster AutoScaler helm Chart deployment configuration"
    postrender                 = ""
    set                        = null
    set_sensitive              = null
  }

  helm_config = merge(
    local.default_helm_config,
    var.helm_config
  )

  ca_set_values = [{
    name  = "rbac.serviceAccount.create"
    value = "false"
    },
    {
      name  = "rbac.serviceAccount.name"
      value = local.service_account_name
  }]

  default_helm_values = [templatefile("${path.module}/values.yaml", {
    aws_region           = data.aws_region.current.name,
    eks_cluster_id       = var.eks_cluster_id
    service_account_name = local.service_account_name
  })]

  /* argocd_gitops_config = {
    enable             = false
    awsRegion          = data.aws_region.current.name
    serviceAccountName = local.service_account_name
  } */
}

main.tf

resource "helm_release" "cluster_autoscaler" {
  //count                      = var.manage_via_gitops ? 0 : 1
  name                       = local.helm_config["name"]
  //repository                 = local.helm_config["repository"]
  chart                      = local.helm_config["chart"]
  //version                    = local.helm_config["version"]
  namespace                  = local.helm_config["namespace"]
  timeout                    = local.helm_config["timeout"]
  values                     = local.helm_config["values"]
  create_namespace           = local.helm_config["create_namespace"]
  lint                       = local.helm_config["lint"]
  description                = local.helm_config["description"]
  /* repository_key_file        = local.helm_config["repository_key_file"]
  repository_cert_file       = local.helm_config["repository_cert_file"]
  repository_ca_file         = local.helm_config["repository_ca_file"]
  repository_username        = local.helm_config["repository_username"]
  repository_password        = local.helm_config["repository_password"] */
  verify                     = local.helm_config["verify"]
  keyring                    = local.helm_config["keyring"]
  disable_webhooks           = local.helm_config["disable_webhooks"]
  reuse_values               = local.helm_config["reuse_values"]
  reset_values               = local.helm_config["reset_values"]
  force_update               = local.helm_config["force_update"]
  recreate_pods              = local.helm_config["recreate_pods"]
  cleanup_on_fail            = local.helm_config["cleanup_on_fail"]
  max_history                = local.helm_config["max_history"]
  atomic                     = local.helm_config["atomic"]
  skip_crds                  = local.helm_config["skip_crds"]
  render_subchart_notes      = local.helm_config["render_subchart_notes"]
  disable_openapi_validation = local.helm_config["disable_openapi_validation"]
  wait                       = local.helm_config["wait"]
  wait_for_jobs              = local.helm_config["wait_for_jobs"]
  dependency_update          = local.helm_config["dependency_update"]
  replace                    = local.helm_config["replace"]

  postrender {
    binary_path = local.helm_config["postrender"]
  }

  dynamic "set" {
    iterator = each_item
    for_each = local.helm_config["set"] != null ? distinct(concat(local.ca_set_values, local.helm_config["set"])) : local.ca_set_values

    content {
      name  = each_item.value.name
      value = each_item.value.value
    }
  }

  dynamic "set_sensitive" {
    iterator = each_item
    for_each = local.helm_config["set_sensitive"] == null ? [] : local.helm_config["set_sensitive"]

    content {
      name  = each_item.value.name
      value = each_item.value.value
    }
  }
  depends_on = [module.irsa]
}

module "irsa" {
  //source                            = "../../../modules/irsa"
  source = "../../irsa"
  //eks_cluster_id                    = var.eks_cluster_id
  eks_cluster_name                  = var.eks_cluster_id
  //create_kubernetes_namespace       = false
  create_kubernetes_namespace       = true
  create_kubernetes_service_account = true
  kubernetes_namespace              = local.namespace
  kubernetes_service_account        = local.service_account_name
  irsa_iam_policies                 = [aws_iam_policy.cluster_autoscaler.arn]
  tags                              = var.tags
}

resource "aws_iam_policy" "cluster_autoscaler" {
  description = "Cluster Autoscaler IAM policy"
  name        = "${var.eks_cluster_id}-${local.helm_config["name"]}-irsa"
  policy      = data.aws_iam_policy_document.cluster_autoscaler.json
}

values.yaml

awsRegion: ${aws_region}

autoDiscovery:
  clusterName: ${eks_cluster_id}
extraArgs:
  aws-use-static-instance-list: true

rbac:
  serviceAccount:
    create: false
    name: ${service_account_name}

resources:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 512Mi


variables.tf

variable "helm_config" {
  type    = any
  default = {}
}

variable "eks_cluster_id" {
  type        = string
  description = "EKS Cluster Name"
}

/* variable "manage_via_gitops" {
  type        = bool
  default     = false
  description = "Determines if the add-on should be managed via GitOps."
} */

variable "tags" {
  type        = map(string)
  description = "Common Tags for AWS resources"
}

In hd-k8s-addons:

local.tf

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.60.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.5.0"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.3.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "2.1.0"
    }
    null = {
      source  = "hashicorp/null"
      version = "3.1.0"
    }
    http = {
      source  = "terraform-aws-modules/http"
      version = "2.4.1"
    }
  }
  required_version = ">= 0.14"
}


main.tf

/* module "aws_vpc_cni" {
  count          = var.enable_amazon_eks_vpc_cni ? 1 : 0
  source         = "./aws-vpc-cni"
  add_on_config  = var.amazon_eks_vpc_cni_config
  eks_cluster_id = var.eks_cluster_id
  common_tags    = var.tags
}

module "aws_coredns" {
  count          = var.enable_amazon_eks_coredns ? 1 : 0
  source         = "./aws-coredns"
  add_on_config  = var.amazon_eks_coredns_config
  eks_cluster_id = var.eks_cluster_id
  common_tags    = var.tags
}

module "aws_kube_proxy" {
  count          = var.enable_amazon_eks_kube_proxy ? 1 : 0
  source         = "./aws-kube-proxy"
  add_on_config  = var.amazon_eks_kube_proxy_config
  eks_cluster_id = var.eks_cluster_id
  common_tags    = var.tags
}

module "aws_ebs_csi_driver" {
  count          = var.enable_amazon_eks_aws_ebs_csi_driver ? 1 : 0
  source         = "./aws-ebs-csi-driver"
  add_on_config  = var.amazon_eks_aws_ebs_csi_driver_config
  eks_cluster_id = var.eks_cluster_id
  common_tags    = var.tags
} */

#-----------------Kubernetes Add-ons----------------------
/* module "agones" {
  count                        = var.enable_agones ? 1 : 0
  source                       = "./agones"
  helm_config                  = var.agones_helm_config
  eks_worker_security_group_id = var.eks_worker_security_group_id
  manage_via_gitops            = var.argocd_manage_add_ons
}

module "argocd" {
  count               = var.enable_argocd ? 1 : 0
  source              = "./argocd"
  helm_config         = var.argocd_helm_config
  argocd_applications = var.argocd_applications
  eks_cluster_id      = var.eks_cluster_id
  add_on_config       = local.argocd_add_on_config
}

module "aws_for_fluent_bit" {
  count             = var.enable_aws_for_fluentbit ? 1 : 0
  source            = "./aws-for-fluentbit"
  helm_config       = var.aws_for_fluentbit_helm_config
  eks_cluster_id    = var.eks_cluster_id
  manage_via_gitops = var.argocd_manage_add_ons
}

module "aws_load_balancer_controller" {
  count             = var.enable_aws_load_balancer_controller ? 1 : 0
  source            = "./aws-load-balancer-controller"
  helm_config       = var.aws_load_balancer_controller_helm_config
  eks_cluster_id    = var.eks_cluster_id
  tags              = var.tags
  manage_via_gitops = var.argocd_manage_add_ons
}

module "aws_node_termination_handler" {
  count  = var.enable_aws_node_termination_handler && length(var.auto_scaling_group_names) > 0 ? 1 : 0
  source = "./aws-node-termination-handler"

  eks_cluster_id          = var.eks_cluster_id
  helm_config             = var.aws_node_termination_handler_helm_config
  autoscaling_group_names = var.auto_scaling_group_names
}

module "aws_opentelemetry_collector" {
  count  = var.enable_aws_open_telemetry ? 1 : 0
  source = "./aws-opentelemetry-eks"

  addon_config             = var.aws_open_telemetry_addon_config
  node_groups_iam_role_arn = var.node_groups_iam_role_arn
  manage_via_gitops        = var.argocd_manage_add_ons
}

module "cert_manager" {
  count             = var.enable_cert_manager ? 1 : 0
  source            = "./cert-manager"
  helm_config       = var.cert_manager_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
} */

module "cluster_autoscaler" {
  count             = var.enable_cluster_autoscaler ? 1 : 0
  source            = "./cluster-autoscaler"
  helm_config       = var.cluster_autoscaler_helm_config
  eks_cluster_id    = var.eks_cluster_id
  tags              = var.tags
  //manage_via_gitops = var.argocd_manage_add_ons
}

/* module "fargate_fluentbit" {
  count          = var.enable_fargate_fluentbit ? 1 : 0
  source         = "./fargate-fluentbit"
  eks_cluster_id = var.eks_cluster_id
  addon_config   = var.fargate_fluentbit_addon_config
}

module "ingress_nginx" {
  count             = var.enable_ingress_nginx ? 1 : 0
  source            = "./ingress-nginx"
  helm_config       = var.ingress_nginx_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
}

module "keda" {
  count             = var.enable_keda ? 1 : 0
  source            = "./keda"
  helm_config       = var.keda_helm_config
  eks_cluster_id    = var.eks_cluster_id
  create_irsa       = var.keda_create_irsa
  irsa_policies     = var.keda_irsa_policies
  tags              = var.tags
  manage_via_gitops = var.argocd_manage_add_ons
}

module "metrics_server" {
  count             = var.enable_metrics_server ? 1 : 0
  source            = "./metrics-server"
  helm_config       = var.metrics_server_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
}

module "prometheus" {
  count          = var.enable_prometheus ? 1 : 0
  source         = "./prometheus"
  eks_cluster_id = var.eks_cluster_id
  helm_config    = var.prometheus_helm_config
  #AWS Managed Prometheus Workspace
  enable_amazon_prometheus             = var.enable_amazon_prometheus
  amazon_prometheus_workspace_endpoint = var.amazon_prometheus_workspace_endpoint
  manage_via_gitops                    = var.argocd_manage_add_ons
  tags                                 = var.tags
}

module "spark_k8s_operator" {
  count             = var.enable_spark_k8s_operator ? 1 : 0
  source            = "./spark-k8s-operator"
  helm_config       = var.spark_k8s_operator_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
}

module "traefik" {
  count             = var.enable_traefik ? 1 : 0
  source            = "./traefik"
  helm_config       = var.traefik_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
}

module "vpa" {
  count       = var.enable_vpa ? 1 : 0
  source      = "./vpa"
  helm_config = var.vpa_helm_config
}

module "yunikorn" {
  count             = var.enable_yunikorn ? 1 : 0
  source            = "./yunikorn"
  helm_config       = var.yunikorn_helm_config
  manage_via_gitops = var.argocd_manage_add_ons
}
 */


variables.tf

variable "eks_cluster_id" {
  description = "EKS Cluster Id"
}

variable "eks_worker_security_group_id" {
  description = "EKS Worker Security group Id created by EKS module"
  default     = ""
}

variable "auto_scaling_group_names" {
  description = "List of self-managed node groups autoscaling group names"
  default     = []
}

variable "node_groups_iam_role_arn" {
  type    = list(string)
  default = []
}

variable "tags" {
  type        = map(string)
  default     = {}
  description = "Additional tags (e.g. `map('BusinessUnit`,`XYZ`)"
}

#-----------EKS MANAGED ADD-ONS------------
variable "amazon_eks_vpc_cni_config" {
  description = "ConfigMap of Amazon EKS VPC CNI add-on"
  type        = any
  default     = {}
}

variable "amazon_eks_coredns_config" {
  description = "ConfigMap for Amazon CoreDNS EKS add-on"
  type        = any
  default     = {}
}

variable "amazon_eks_kube_proxy_config" {
  description = "ConfigMap for Amazon EKS Kube-Proxy add-on"
  type        = any
  default     = {}
}

variable "amazon_eks_aws_ebs_csi_driver_config" {
  description = "configMap for AWS EBS CSI Driver add-on"
  type        = any
  default     = {}
}

variable "enable_amazon_eks_vpc_cni" {
  type        = bool
  default     = false
  description = "Enable VPC CNI add-on"
}

variable "enable_amazon_eks_coredns" {
  type        = bool
  default     = false
  description = "Enable CoreDNS add-on"
}

variable "enable_amazon_eks_kube_proxy" {
  type        = bool
  default     = false
  description = "Enable Kube Proxy add-on"
}

variable "enable_amazon_eks_aws_ebs_csi_driver" {
  type        = bool
  default     = false
  description = "Enable EKS Managed AWS EBS CSI Driver add-on"
}

#-----------CLUSTER AUTOSCALER-------------
variable "enable_cluster_autoscaler" {
  type        = bool
  default     = false
  description = "Enable Cluster autoscaler add-on"
}

variable "cluster_autoscaler_helm_config" {
  type        = any
  default     = {}
  description = "Cluster Autoscaler Helm Chart config"
}

#-----------Amazon Managed Service for Prometheus-------------
variable "enable_amazon_prometheus" {
  type        = bool
  default     = false
  description = "Enable AWS Managed Prometheus service"
}

variable "amazon_prometheus_workspace_endpoint" {
  type        = string
  default     = null
  description = "AWS Managed Prometheus WorkSpace Endpoint"
}

variable "amazon_prometheus_ingest_iam_role_arn" {
  type        = string
  default     = null
  description = "AWS Managed Prometheus WorkSpaceSpace IAM role ARN"
}

variable "amazon_prometheus_ingest_service_account" {
  type        = string
  default     = null
  description = "AWS Managed Prometheus Ingest Service Account"
}

#-----------PROMETHEUS-------------
variable "enable_prometheus" {
  description = "Enable Community Prometheus add-on"
  type        = bool
  default     = false
}

variable "prometheus_helm_config" {
  description = "Community Prometheus Helm Chart config"
  type        = any
  default     = {}
}

#-----------METRIC SERVER-------------
variable "enable_metrics_server" {
  type        = bool
  default     = false
  description = "Enable metrics server add-on"
}

variable "metrics_server_helm_config" {
  type        = any
  default     = {}
  description = "Metrics Server Helm Chart config"
}

#-----------TRAEFIK-------------
variable "enable_traefik" {
  type        = bool
  default     = false
  description = "Enable Traefik add-on"
}

variable "traefik_helm_config" {
  type        = any
  default     = {}
  description = "Traefik Helm Chart config"
}

#-----------AGONES-------------
variable "enable_agones" {
  type        = bool
  default     = false
  description = "Enable Agones GamServer add-on"
}

variable "agones_helm_config" {
  type        = any
  default     = {}
  description = "Agones GameServer Helm Chart config"
}

#-----------AWS LB Ingress Controller-------------
variable "enable_aws_load_balancer_controller" {
  type        = bool
  default     = false
  description = "Enable AWS Load Balancer Controller add-on"
}

variable "aws_load_balancer_controller_helm_config" {
  type        = any
  description = "AWS Load Balancer Controller Helm Chart config"
  default     = {}
}

#-----------NGINX-------------
variable "enable_ingress_nginx" {
  type        = bool
  default     = false
  description = "Enable Ingress Nginx add-on"
}

variable "ingress_nginx_helm_config" {
  description = "Ingress Nginx Helm Chart config"
  type        = any
  default     = {}
}

#-----------SPARK K8S OPERATOR-------------
variable "enable_spark_k8s_operator" {
  type        = bool
  default     = false
  description = "Enable Spark on K8s Operator add-on"
}

variable "spark_k8s_operator_helm_config" {
  description = "Spark on K8s Operator Helm Chart config"
  type        = any
  default     = {}
}

#-----------AWS FOR FLUENT BIT-------------
variable "enable_aws_for_fluentbit" {
  type        = bool
  default     = false
  description = "Enable AWS for FluentBit add-on"
}

variable "aws_for_fluentbit_helm_config" {
  type        = any
  description = "AWS for FluentBit Helm Chart config"
  default     = {}
}

#-----------FARGATE FLUENT BIT-------------
variable "enable_fargate_fluentbit" {
  type        = bool
  default     = false
  description = "Enable Fargate FluentBit add-on"
}

variable "fargate_fluentbit_addon_config" {
  type        = any
  description = "Fargate fluentbit add-on config"
  default     = {}
}

#-----------CERT MANAGER-------------
variable "enable_cert_manager" {
  type        = bool
  default     = false
  description = "Enable Cert Manager add-on"
}

variable "cert_manager_helm_config" {
  type        = any
  description = "Cert Manager Helm Chart config"
  default     = {}
}
#-----------AWS OPEN TELEMETRY ADDON-------------
variable "enable_aws_open_telemetry" {
  type        = bool
  default     = false
  description = "Enable AWS Open Telemetry Distro add-on"
}

variable "aws_open_telemetry_addon_config" {
  type        = any
  default     = {}
  description = "AWS Open Telemetry Distro add-on config"
}

#-----------ARGOCD ADDON-------------
variable "enable_argocd" {
  type        = bool
  default     = false
  description = "Enable Argo CD Kubernetes add-on"
}

variable "argocd_helm_config" {
  type        = any
  default     = {}
  description = "Argo CD Kubernetes add-on config"
}

variable "argocd_applications" {
  type        = any
  default     = {}
  description = "Argo CD Applications config to bootstrap the cluster"
}

variable "argocd_manage_add_ons" {
  type        = bool
  default     = false
  description = "Enable managing add-on configuration via ArgoCD"
}

#-----------AWS NODE TERMINATION HANDLER-------------
variable "enable_aws_node_termination_handler" {
  type        = bool
  default     = false
  description = "Enable AWS Node Termination Handler add-on"
}

variable "aws_node_termination_handler_helm_config" {
  type        = any
  description = "AWS Node Termination Handler Helm Chart config"
  default     = {}
}

#-----------KEDA ADDON-------------
variable "enable_keda" {
  type        = bool
  default     = false
  description = "Enable KEDA Event-based autoscaler add-on"
}

variable "keda_helm_config" {
  type        = any
  default     = {}
  description = "KEDA Event-based autoscaler add-on config"
}

variable "keda_create_irsa" {
  type        = bool
  description = "Indicates if the add-on should create a IAM role + service account"
  default     = true
}

variable "keda_irsa_policies" {
  type        = list(string)
  description = "Additional IAM policies for a IAM role for service accounts"
  default     = []
}

#-----------Vertical Pod Autoscaler(VPA) ADDON-------------
variable "enable_vpa" {
  type        = bool
  default     = false
  description = "Enable Kubernetes Vertical Pod Autoscaler add-on"
}

variable "vpa_helm_config" {
  type        = any
  default     = {}
  description = "Vertical Pod Autoscaler Helm Chart config"
}

#-----------Apache YuniKorn ADDON-------------
variable "enable_yunikorn" {
  type        = bool
  default     = false
  description = "Enable Apache YuniKorn K8s scheduler add-on"
}

variable "yunikorn_helm_config" {
  type        = any
  default     = {}
  description = "YuniKorn K8s scheduler Helm Chart config"
}
