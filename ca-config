in managed_ng data.tf file:

data "aws_iam_policy_document" "cluster_autoscaler" {
  statement {
    sid       = ""
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeTags",
      "autoscaling:SetDesiredCapacity",
      "autoscaling:TerminateInstanceInAutoScalingGroup",
      "ec2:DescribeLaunchTemplateVersions"
    ]
  }
}

in iam.tf file file:

resource "aws_iam_role_policy_attachment" "managed_ng_cluster_autoscaler" {
  count                         = var.create_autoscaler_policy ? 1 : 0
  policy_arn = aws_iam_policy.eks_cluster_autoscaler[0].arn
  role       = aws_iam_role.managed_ng.name
}

resource "aws_iam_policy" "eks_cluster_autoscaler" {
  count                         = var.create_autoscaler_policy ? 1 : 0
  description = "Cluster Autoscaler IAM policy"
  name        = "${var.eks_cluster_name}-${local.managed_node_group["node_group_name"]}"
  policy      = data.aws_iam_policy_document.cluster_autoscaler.json
}

In variables.tf file

variable "create_autoscaler_policy" {
  type = bool
  default = false
  description = "Check whether to associate autoscaler policy with the nodes. This policy is not required if using Cluster Autoscaler with IRSA"
}

In main/aws-eks-worker.tf file:

 depends_on = [module.aws_eks, kubernetes_config_map.aws_auth]

  create_autoscaler_policy = var.cluster_autoscaler_enable
