
IN: irsa directory within hd-k8s0ad

data.tf


# Assume role policy for your service account
data "aws_iam_policy_document" "irsa_with_oidc" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]

    principals {
      type        = "Federated"
      identifiers = [local.eks_oidc_provider_arn]
    }
    condition {
      test     = "StringEquals"
      variable = "${local.eks_oidc_issuer_url}:sub"
      values   = ["system:serviceaccount:${var.kubernetes_namespace}:${var.kubernetes_service_account}"]
    }
    # condition {
    #   test     = "StringEquals"
    #   variable = "${local.eks_oidc_issuer_url}:aud"
    #   values   = ["sts.amazonaws.com"]
    # }
  }
}

data "aws_eks_cluster" "eks_cluster" {
  //name = var.eks_cluster_name
  name = "cust01-preprod-dev-eks"
}

data "aws_partition" "current" {}

data "aws_caller_identity" "current" {}


locals.tf

locals {
  eks_oidc_issuer_url   = replace(data.aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer, "https://", "")
  eks_oidc_provider_arn = "arn:${data.aws_partition.current.partition}:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${local.eks_oidc_issuer_url}"
}

main.tf


# resource "kubernetes_namespace_v1" "irsa" {
resource "kubernetes_namespace" "irsa" {
  count = var.create_kubernetes_namespace ? 1 : 0
  metadata {
    name = var.kubernetes_namespace

    labels = {
      "app.kubernetes.io/managed-by" = "terraform-ssp-amazon-eks"
    }
  }
}

# resource "kubernetes_service_account_v1" "irsa" {
resource "kubernetes_service_account" "irsa" {
  count = var.create_kubernetes_service_account ? 1 : 0
  metadata {
    name        = var.kubernetes_service_account
    namespace   = var.kubernetes_namespace
    annotations = { "eks.amazonaws.com/role-arn" : aws_iam_role.irsa.arn }
    labels = {
      "app.kubernetes.io/managed-by" = "terraform-ssp-amazon-eks"
    }
  }

  automount_service_account_token = true
}

resource "aws_iam_role" "irsa" {
  name                  = "${var.eks_cluster_name}-${var.kubernetes_service_account}-irsa"
  assume_role_policy    = join("", data.aws_iam_policy_document.irsa_with_oidc.*.json)
  path                  = var.iam_role_path
  force_detach_policies = true
  tags                  = var.tags
}

resource "aws_iam_role_policy_attachment" "irsa" {
  count      = length(var.irsa_iam_policies)
  policy_arn = var.irsa_iam_policies[count.index]
  role       = aws_iam_role.irsa.name
}

outputs.tf

output "irsa_iam_role_arn" {
  description = "IAM role ARN for your service account"
  value       = aws_iam_role.irsa.arn
}

output "irsa_iam_role_name" {
  description = "IAM role name for your service account"
  value       = aws_iam_role.irsa.name
}

variables.tf


variable "kubernetes_namespace" {
  description = "Kubernetes Namespace name"
}

variable "create_kubernetes_namespace" {
  description = "Should the module create the namespace"
  type        = bool
  default     = true
}

variable "create_kubernetes_service_account" {
  description = "Should the module create the Service Account"
  type        = bool
  default     = true
}

variable "kubernetes_service_account" {
  description = "Kubernetes Service Account Name"
}

variable "eks_cluster_name" {
  type        = string
  description = "EKS Cluster Id"
}

variable "iam_role_path" {
  type        = string
  default     = "/"
  description = "IAM Role path"
}

variable "tags" {
  type        = map(string)
  description = "Common tags for AWS resources"
  default     = null
}

variable "irsa_iam_policies" {
  type        = list(string)
  description = "IAM Policies for IRSA IAM role"
}

